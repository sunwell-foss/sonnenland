---
title: "Sunnwell's Sonnenland"
subtitle: "Switzerland's solar radiation potential by land types"
author: "Nils Ratnaweera"
params:
  full: false
format:
    html: 
      code-fold: true
      css: style.css
---

# Introduction

The Sunwell group utilized solar radiation modeling to estimate the potential solar energy (measured in Kilowatt hours per square meter) across Switzerland at a 25m resolution. The objective of this study is to determine the solar potential for the following land use categories

- Agricultural areas
  - Regular Farmland
  - Summer Grazing Land
- Standing Water
  - Natural Water Bodies
  - Reservoirs
- National Roads

This report presents a detailed overview of the entire processing pipeline and showcases the findings.

```{r}
#| message: false
#| code-summary: Libraries, functions and options used for this report
library(tmap)
library(stringr)
library(forcats)
library(ggplot2)
library(terra)
library(readr)
library(tidyr)
library(dplyr)
options("sf_max.plot"=1)

```


# Data description

The data for this analysis was mostly gathered by the Sunwell group. The core of the analysis is the raster data mentioned above and described in more detail below. 

@tbl-datasets is a listing of all the datasets used in this analysis. This data is provided by Sunwell and is described in more detail [here](https://sunwell-switzerland.notion.site/Collaboration-with-Nils-5fcb9e5334e3412d82a1caed6ed672c5).

```{R}
#| echo: false
#| message: false
#| tbl-cap: Datasets used as inputs for the analysis
#| label: tbl-datasets

read_csv("data/datasets-metadata.csv") |> 
  knitr::kable()

```


# Data Analysis


```{r}
mean_values <- read_csv("data-intermediate/mean_values.csv")

sonnendach_raw <- read_csv("data-intermediate/mean_values_sonnendach.csv",col_names = "query")

sonnendach_parsed <- sonnendach_raw |> 
  extract(query, c("key"),"^(\\w+)\\s",remove = FALSE) |> 
  extract(query, c("value"),"\\s([\\d,\\.]+)$",remove = TRUE) |> 
  mutate(value = as.numeric(value))


sonnendach_area <- sonnendach_parsed |> 
  filter(key == "area") |> 
  pull(value) 


# Die Berechnungen der Produktion basieren auf der Nutzung der gesamten Dachfläche (maximale Modulfläche). Anbauten wie Dachfenster, Lukarnen, Kamine oder Balkone wurden bei der Erfassung der Dachfläche nicht berücksichtigt. Die real nutzbare Dachfläche kann deshalb bedeutend kleiner ausfallen. In den meisten Fällen lohnt es sich, die gesamte real nutzbare Dachfläche mit einer PV-Anlage auszustatten. Ab September 2022 wird ein Modul-Wirkungsgrad von 20% angenommen (vorher 17%)

sonnendach <- sonnendach_parsed |> 
  filter(key != "area") |> 
  mutate(
    area = sonnendach_area
  ) |> 
  transmute(
    season = key, 
    vector_dataset = "Rooftops", 
    area_m2 = sonnendach_area,
    # efficiency 20% already accounted for
    # assuming a GCR of 100%
    yield_mean_kwh_m2 = value/area, 
    yield_total_twh = value/1e9,
    )
  

yield <- mean_values |> 
  extract(raster_dataset,c("optimized", "season"), c("_(annual|winter)_(summer|winter).tif$")) 

write_csv(yield, "yield.csv")

yield <- yield |> 
  mutate(
    area_m2 = pixelsize_x*pixelsize_y*rastersize_x*rastersize_y*perc_valid/100,
    yield_mean_kwh_m2 = mean_value / (pixelsize_x*pixelsize_y) * 100 * 0.5 * 0.2,
    yield_total_twh = (yield_mean_kwh_m2 * area_m2)/1e9
  ) |> 
  select(-matches("size_"), -perc_valid, -mean_value)


yield2 <- bind_rows(yield, sonnendach)


dff <- yield2 |> 
  mutate(subset = ifelse(is.na(subset),vector_dataset, subset)) |> 
  ungroup() |> 
  mutate(
    vector_dataset = fct_reorder(vector_dataset,yield_total_twh, "sum"),
    subset = fct_reorder(subset, yield_total_twh)
  ) |> 
  filter(optimized == "annual" | is.na(optimized), season == "winter")

c(
  "Regular Farmland" = "#3CB371",
  "Summer Grazing Land" = "#90EE90",
  "National Roads" = "#778899",
  "Reservoirs" = "#4682B4",
  "Natural" = "#87CEEB",
  "Rooftops" = "#BC8F8F"
) -> cols

dff |> 
  mutate(yield_total_pwh = yield_total_twh/1000) |> 
  ggplot(aes(yield_total_pwh,vector_dataset, fill = subset)) +
  geom_col() +
  theme_light() +
  scale_fill_manual(values = cols) +
  # geom_vline(xintercept = seq(0,800000, 50000)[-1], colour = "white",lwd = 2) +
  scale_x_continuous("Potential Yield (in PWh)", labels = scales::label_number(big.mark = "'")) +
  theme(legend.position = "none", axis.title.y = element_blank())




```

